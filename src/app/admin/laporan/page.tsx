"use client";

import { useState, useEffect } from "react";
import { PlusIcon } from "@heroicons/react/24/outline";
import AdminLayout from "@/components/admin/Layout/AdminLayout";
import Table from "@/components/admin/Common/Table";
import Modal from "@/components/admin/Common/Modal";
import Button from "@/components/admin/Common/Button";
import Card from "@/components/admin/Common/Card";
import axios from "axios";
import { formatDate, formatCurrency } from "@/lib/utils";
import { TableColumn } from "@/lib/types";

interface PesananLaporan {
  id: number;
  namaPelanggan: string;
  layanan: string;
  hargaDisepakati: number;
  tanggalPesan: string;
}

export default function LaporanPage() {
  const [laporanList, setLaporanList] = useState<PesananLaporan[]>([]);
  const [loading, setLoading] = useState(false);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [totalPendapatan, setTotalPendapatan] = useState(0);

  useEffect(() => {
    if (startDate && endDate) {
      fetchData();
    }
  }, [startDate, endDate]);

  const fetchData = async () => {
    try {
      setLoading(true);
      const res = await axios.get(
        `/api/laporan?start=${startDate}&end=${endDate}`
      );
      console.log(res);
      const data: PesananLaporan[] = res.data.data.map((p: any) => ({
        id: p.id,
        namaPelanggan: p.namaPelanggan,
        layanan: p.layanan?.nama || "-",
        hargaDisepakati: p.hargaDisepakati || 0,
        tanggalPesan: p.tanggalPesan,
      }));
      setLaporanList(data);
      setTotalPendapatan(
        data.reduce((sum, p) => sum + (p.hargaDisepakati || 0), 0)
      );
    } catch (err) {
      console.error("Gagal mengambil data laporan:", err);
    } finally {
      setLoading(false);
    }
  };
  console.log(laporanList);
  const columns: TableColumn[] = [
    { key: "id", label: "ID" },
    { key: "namaPelanggan", label: "Nama Pelanggan" },
    { key: "layanan", label: "Layanan" },
    {
      key: "hargaDisepakati",
      label: "Harga",
      render: (value) => formatCurrency(value),
    },
    {
      key: "tanggalPesan",
      label: "Tanggal Pesan",
      render: (value) => formatDate(value),
    },
  ];

  const handleCetak = () => {
    const newWindow = window.open("", "_blank");
    if (newWindow) {
      newWindow.document.write(`
      <html>
        <head>
          <title>Laporan Pendapatan CV Arfilla Jaya Putra</title>
          <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
        </head>
        <body class="p-8 font-sans">
          <div class="text-center mb-8">
            <h1 class="text-3xl font-bold">Laporan Pendapatan</h1>
            <h2 class="text-xl font-medium mt-2">CV Arfilla Jaya Putra</h2>
            <p class="text-gray-600 mt-1">Periode: ${formatDate(
              startDate
            )} - ${formatDate(endDate)}</p>
          </div>

          <table class="min-w-full border-collapse border border-gray-300 shadow-md">
            <thead class="bg-blue-200">
              <tr>
                <th class="border border-gray-300 px-4 py-2">No</th>
                <th class="border border-gray-300 px-4 py-2">Tanggal</th>
                <th class="border border-gray-300 px-4 py-2">Pelanggan</th>
                <th class="border border-gray-300 px-4 py-2">Layanan</th>
                <th class="border border-gray-300 px-4 py-2 text-right">Harga</th>
              </tr>
            </thead>
            <tbody>
              ${laporanList
                .map(
                  (p, i) => `
                <tr class="${i % 2 === 0 ? "bg-gray-50" : "bg-white"}">
                  <td class="border border-gray-300 px-4 py-2">${i + 1}</td>
                  <td class="border border-gray-300 px-4 py-2">${formatDate(
                    p.tanggalPesan
                  )}</td>
                  <td class="border border-gray-300 px-4 py-2">${
                    p.namaPelanggan
                  }</td>
                  <td class="border border-gray-300 px-4 py-2">${p.layanan}</td>
                  <td class="border border-gray-300 px-4 py-2 text-right">${formatCurrency(
                    p.hargaDisepakati
                  )}</td>
                </tr>
              `
                )
                .join("")}
            </tbody>
            <tfoot>
              <tr class="bg-gray-200 font-semibold">
                <td colspan="4" class="border border-gray-300 px-4 py-2 text-right">Total Pendapatan</td>
                <td class="border border-gray-300 px-4 py-2 text-right">${formatCurrency(
                  totalPendapatan
                )}</td>
              </tr>
            </tfoot>
          </table>

          <div class="mt-6 text-center text-gray-500 text-sm">
            Generated by Sistem Laporan CV Arfilla Jaya Putra
          </div>

          <script>window.print()</script>
        </body>
      </html>
    `);
      newWindow.document.close();
    }
  };

  return (
    <AdminLayout title="Laporan Pesanan Selesai">
      <Card>
        <div className="flex justify-between items-center mb-6">
          <div>
            <h3 className="text-lg font-semibold">Filter Laporan</h3>
            <p className="text-gray-600">
              Pilih rentang tanggal untuk melihat laporan pesanan selesai
            </p>
          </div>
          <Button onClick={handleCetak} icon={<PlusIcon className="w-4 h-4" />}>
            Cetak Laporan
          </Button>
        </div>

        <div className="flex gap-4 mb-6">
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            className="border rounded px-3 py-2"
          />
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            className="border rounded px-3 py-2"
          />
        </div>

        {loading ? (
          <p>Memuat data...</p>
        ) : (
          <>
            <Table columns={columns} data={laporanList} />
            <div className="mt-4 text-right font-semibold text-green-600">
              Total Pendapatan: {formatCurrency(totalPendapatan)}
            </div>
          </>
        )}
      </Card>
    </AdminLayout>
  );
}
